///////////////////////////////////////////////////////////////////////////////////////ASS 1

#question 1
x = c(10, 20, 30, 25, 9, 26)
print("Original Vectors:")
print(x)
print("Maximum value of the above Vector:")
print(max(x))
print("Minimum value of the above Vector:")
print(min(x))

#question 2
num = as.integer(readline(prompt="Enter a number: "))
factorial = 1
if(num < 0) {
  print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
  print("The factorial of 0 is 1")
} else {
  for(i in 1:num) {
    factorial = factorial * i
  }
  print(paste("The factorial of", num ,"is",factorial))
}
#question 3
fibonacci_numbers <- function(n) {
  if (n == 0) {
    return(0)
  } else if (n == 1) {
    return(1)
  } else {
    return(fibonacci_numbers(n-2) + fibonacci_numbers(n-1))
  }
}

n = as.integer(readline(prompt="Enter a number: "))

for (i in 0:n) {
  cat(fibonacci_numbers(i), " ")
}


#question 4
add <- function(x, y) {
  return(x + y)
}
subtract <- function(x, y) {
  return(x - y)
}
multiply <- function(x, y) {
  return(x * y)
}
divide <- function(x, y) {
  return(x / y)
}

print("Select operation.")
print("1.Add")
print("2.Subtract")
print("3.Multiply")
print("4.Divide")
choice = as.integer(readline(prompt="Enter choice[1/2/3/4]: "))
num1 = as.integer(readline(prompt="Enter first number: "))
operator <- switch(choice,"+","-","*","/")
result <- switch(choice, add(num1, num2), subtract(num1, num2), multiply(num1, num2), divide(num1, num2))
print(paste(num1, operator, num2, "=", result))

Q5
//scatter
# Sample data
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 1, 5, 7)

# Create a scatter plot
plot(x, y, main="Scatter Plot", xlab="X-axis", ylab="Y-axis", pch=19)
//pie
# Sample data
labels <- c("A", "B", "C", "D")
sizes <- c(20, 30, 15, 35)

# Create a pie chart
pie(sizes, labels=labels, main="Pie Chart")
// bar
# Sample data
categories <- c("Category A", "Category B", "Category C")
values <- c(10, 20, 15)

# Create a bar plot
barplot(values, names.arg=categories, main="Bar Plot", xlab="Categories", ylab="Values", col="blue")
//histo
# Sample data
data <- c(5, 6, 7, 8, 9, 9, 10, 10, 10, 11, 12)

# Create a histogram
hist(data, main="Histogram", xlab="Values", ylab="Frequency", col="green")
//Box
# Sample data
data1 <- c(10, 15, 20, 25, 30)
data2 <- c(5, 10, 15, 20, 25)

# Create a box plot
boxplot(data1, data2, names=c("Group 1", "Group 2"), main="Box Plot", xlab="Groups", ylab="Values", col=c("red", "blue"))
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Ass2




Q1
Ans 
coin<- c(rep("gold",20),rep("silver",30),rep("bronze",50))
sample_space <- sample(coin,10,replace = TRUE)
print(sample_space)

success_prob <-.90
failure_prov<- .10
num_procedure<-10

sample_space<-sample(c("success","failure"),num_procedure,replace = TRUE,prob = c(success_prob,failure_prov))
print(sample_space)

Q2
ANS-👍
num_sim<- 1000
shared_birthday<-function(n){
  birthday<-sample(1:365,n,replace = TRUE)
  return(length(birthday)!=length(unique(birthday)))
}
n_values<-2:100
probabilities<- numeric(length (n_values))
for (i in 1:length(n_values)) {
  matches <- replicate(num_sim, shared_birthday(n_values[i]))
  probabilities[i] <- sum(matches) / num_sim
}
data.frame(n = n_values, Probability = probabilities)
B
# Number of simulations
num_simulations <- 10000

# Function to check if there's a shared birthday in a group of size n
shared_birthday <- function(n) {
  birthdays <- sample(1:365, n, replace = TRUE)
  return(length(birthdays) != length(unique(birthdays)))
}

# Find the smallest value of n for which the probability of a match is > 0.5
n <- 2
while (TRUE) {
  matches <- replicate(num_simulations, shared_birthday(n))
  probability <- sum(matches) / num_simulations
  if (probability > 0.5) {
    break
  }
  n <- n + 1
}

# Print the result
cat("The smallest value of n for which the probability of a match is > 0.5 is:", n)




Q3
ANS3
conditional_prob <- function(P_RC,P_c){
  return(P_RC/P_c)
}

P_Cloudy <-0.40
P_Rain <- 0.20
P_CloudyRain <- 0.85

P_RainGivenCloudy <- conditional_prob(P_CloudyRain,P_Cloudy)

cat("prob is", P_RainGivenCloudy)




Q4
# Load the Iris dataset
data(iris)

# (a) Print first few rows of the dataset
head(iris)

# (b) Find the structure of the dataset
str(iris)

# (c) Find the range of sepal length
range_sepal_length <- range(iris$Sepal.Length)
cat("Range of Sepal Length:", range_sepal_length, "\n")

# (d) Find the mean of sepal length
mean_sepal_length <- mean(iris$Sepal.Length)
cat("Mean of Sepal Length:", mean_sepal_length, "\n")

# (e) Find the median of sepal length
median_sepal_length <- median(iris$Sepal.Length)
cat("Median of Sepal Length:", median_sepal_length, "\n")

# (f) Find the first and third quartiles and the interquartile range
quartiles_sepal_length <- quantile(iris$Sepal.Length, probs = c(0.25, 0.75))
iqr_sepal_length <- IQR(iris$Sepal.Length)
cat("First Quartile (Q1):", quartiles_sepal_length[1], "\n")
cat("Third Quartile (Q3):", quartiles_sepal_length[2], "\n")
cat("Interquartile Range (IQR):", iqr_sepal_length, "\n")

# (g) Find the standard deviation and variance
sd_sepal_length <- sd(iris$Sepal.Length)
var_sepal_length <- var(iris$Sepal.Length)
cat("Standard Deviation:", sd_sepal_length, "\n")
cat("Variance:", var_sepal_length, "\n")

# (h) You can repeat the above exercises for sepal.width, petal.length, and petal.width

# For sepal.width
range_sepal_width <- range(iris$Sepal.Width)
mean_sepal_width <- mean(iris$Sepal.Width)
median_sepal_width <- median(iris$Sepal.Width)
quartiles_sepal_width <- quantile(iris$Sepal.Width, probs = c(0.25, 0.75))
iqr_sepal_width <- IQR(iris$Sepal.Width)
sd_sepal_width <- sd(iris$Sepal.Width)
var_sepal_width <- var(iris$Sepal.Width)

# For petal.length
range_petal_length <- range(iris$Petal.Length)
mean_petal_length <- mean(iris$Petal.Length)
median_petal_length <- median(iris$Petal.Length)
quartiles_petal_length <- quantile(iris$Petal.Length, probs = c(0.25, 0.75))
iqr_petal_length <- IQR(iris$Petal.Length)
sd_petal_length <- sd(iris$Petal.Length)
var_petal_length <- var(iris$Petal.Length)

# For petal.width
range_petal_width <- range(iris$Petal.Width)
mean_petal_width <- mean(iris$Petal.Width)
median_petal_width <- median(iris$Petal.Width)
quartiles_petal_width <- quantile(iris$Petal.Width, probs = c(0.25, 0.75))
iqr_petal_width <- IQR(iris$Petal.Width)
sd_petal_width <- sd(iris$Petal.Width)
var_petal_width <- var(iris$Petal.Width)

# (i) Use the built-in function summary on the dataset Iris
summary(iris)



Q5
ANS
calculate_mode <- function(x) {
  # Use the table function to count the frequency of each unique value
  freq_table <- table(x)
  
  # Find the maximum frequency
  max_freq <- max(freq_table)
  
  # Get the values that have the maximum frequency (the mode(s))
  modes <- as.numeric(names(freq_table[freq_table == max_freq]))
  
  return(modes)
}

# Example usage:
data <- c(1, 2, 2, 3, 3, 4, 4, 4)
mode_result <- calculate_mode(data)
cat("Mode(s) of the data:", mode_result, "\n")



/////////////////////////////////////////////////////////////////////////////////////////////////////////////Ass3

Q1 Roll 12 dice simultaneously, and let X denotes the number of 6’s that appear. Calcu-
late the probability of getting 7, 8 or 9, 6’s using R. (Try using the function pbinom;

If we set S = {get a 6 on one roll}, P(S) = 1/6 and the rolls constitute Bernoulli tri-
als; thus X ∼ binom(size=12, prob=1/6) and we are looking for P(7 ≤ X ≤ 9).

ANS
# Define the parameters
n <- 12  # Total number of trials (rolls)
p <- 1/6  # Probability of success (getting a 6)

# Calculate the cumulative probability of X from 0 to 6 (P(X ≤ 6))
prob_less_than_7 <- pbinom(6, size = n, prob = p)

# Calculate the cumulative probability of X from 0 to 9 (P(X ≤ 9))
prob_less_than_10 <- pbinom(9, size = n, prob = p)

# Calculate the cumulative probability of X from 0 to 6 (P(X ≤ 6)) and subtract it from P(X ≤ 9) to get P(7 ≤ X ≤ 9)
prob_7_to_9 <- prob_less_than_10 - prob_less_than_7

# Print the result
prob_7_to_9

Q2 Assume that the test scores of a college entrance exam fits a normal distribution.
Furthermore, the mean test score is 72, and the standard deviation is 15.2. What is
the percentage of students scoring 84 or more in the exam?

Ans
# Given parameters
mean_score <- 72
std_dev <- 15.2
score_to_find <- 84

# Calculate the Z-score
z_score <- (score_to_find - mean_score) / std_dev

# Calculate the percentage using the CDF
percentage_above_84 <- 1 - pnorm(z_score)

# Convert to percentage format
percentage_above_84_percent <- percentage_above_84 * 100

# Print the result
percentage_above_84_percent

Q3 On the average, five cars arrive at a particular car wash every hour. Let X count the
number of cars that arrive from 10AM to 11AM, then X ∼Poisson(λ = 5). What is
probability that no car arrives during this time. Next, suppose the car wash above
is in operation from 8AM to 6PM, and we let Y be the number of customers that
appear in this period. Since this period covers a total of 10 hours, we get that Y ∼
Poisson(λ = 5×10 = 50). What is the probability that there are between 48 and 50
customers, inclusive?

Ans3
# Average arrival rate for 1 hour
lambda_1_hour <- 5

# Calculate the probability that no car arrives (X = 0)
probability_no_car <- dpois(0, lambda_1_hour)
probability_no_car

# Average arrival rate for 10 hours
lambda_10_hours <- 50

# Calculate the probability for Y = 48, 49, and 50, and then sum them
probability_48_to_50 <- sum(dpois(48:50, lambda_10_hours))
probability_48_to_50



Q4Suppose in a certain shipment of 250 Pentium processors there are 17 defective pro-
cessors. A quality control consultant randomly collects 5 processors for inspection to

determine whether or not they are defective. Let X denote the number of defectives
in the sample. Find the probability of exactly 3 defectives in the sample, that is, find
P(X = 3).
Ans
# Parameters
N <- 250    # Total number of processors
n <- 5      # Number of processors in the sample
k <- 17     # Number of defective processors
x <- 3      # Number of defective processors in the sample

# Calculate P(X = 3)
probability_x_3 <- (choose(k, x) * choose(N - k, n - x)) / choose(N, n)
probability_x_3

Q5
A recent national study showed that approximately 44.7% of college students have
used Wikipedia as a source in at least one of their term papers. Let X equal the
number of students in a random sample of size n = 31 who have used Wikipedia as a
source.
(a) How is X distributed?
(b) Sketch the probability mass function.
(c) Sketch the cumulative distribution function.
(d) Find mean, variance and standard deviation of X
Ans # Define the parameters
n <- 31          # Sample size
p <- 0.447       # Probability of success

# Probability Mass Function (PMF)
k <- 0:n         # Possible values of X
pmf <- dbinom(k, size = n, prob = p)

# Cumulative Distribution Function (CDF)
cdf <- pbinom(k, size = n, prob = p)

# Mean, Variance, and Standard Deviation
mean_X <- n * p
variance_X <- n * p * (1 - p)
std_deviation_X <- sqrt(variance_X)

# Print the results
cat("PMF (Probability Mass Function):\n")
print(data.frame(X = k, PMF = pmf))

cat("\nCDF (Cumulative Distribution Function):\n")
print(data.frame(X = k, CDF = cdf))

cat("\nMean (μ):", mean_X, "\n")
cat("Variance (σ^2):", variance_X, "\n")
cat("Standard Deviation (σ):", std_deviation_X, "\n")
////////////////////////////////////////////////////////////////////////////////////////////////////////Ass4
1. The probability distribution of X, the number of imperfections per 10 meters of a
synthetic fabric in continuous rolls of uniform width, is given as
x 0 1 2 3 4
p(x) 0.41 0.37 0.16 0.05 0.01
Find the average number of imperfections per 10 meters of this fabric.
(Try functions sum( ), weighted.mean( ), c(a %*% b) to find expected value/mean.

Ans- # Define the values of x and their probabilities
x <- c(0, 1, 2, 3, 4)
px <- c(0.41, 0.37, 0.16, 0.05, 0.01)

# Calculate the weighted mean
mean_value <- sum(x * px)

# Print the result
print(mean_value)



Q2 The time T, in days, required for the completion of a contracted project is a random
variable with probability density function f(t) = 0.1 e(-0.1t)

for t > 0 and 0 otherwise. Find

the expected value of T.
Use function integrate( ) to find the expected value of continuous random variable T.

Ans- # Define the function f(t)
f <- function(t) {
  0.1 * exp(-0.1 * t)
}

# Calculate the expected value using integrate()
expected_value <- integrate(function(t) t * f(t), lower = 0, upper = Inf)$value

# Print the result
print(expected_value)


Q3 A bookstore purchases three copies of a book at $6.00 each and sells them for $12.00
each. Unsold copies are returned for $2.00 each. Let X = {number of copies sold} and
Y = {net revenue}. If the probability mass function of X is
x 0 1 2 3
p(x) 0.1 0.2 0.2 0.5

Find the expected value of Y.

Ans # Define the values of X and their probabilities
x <- c(0, 1, 2, 3)
px <- c(0.1, 0.2, 0.2, 0.5)

# Define a function to calculate the net revenue for each value of X
calculate_net_revenue <- function(x) {
  if (x == 0) {
    return 3 * 2  # Unsold copies are returned for $2.00 each
  } else {
    return (x * 12) - ((3 - x) * 6)  # Sold copies at $12.00 each, unsold copies returned for $6.00 each
  }
}

# Calculate the expected value of Y using the probability mass function of X
expected_value_Y <- sum(sapply(x, function(xi) calculate_net_revenue(xi) * px[which(x == xi)]))

# Print the result
print(expected_value_Y)



Q4 Find the first and second moments about the origin of the random variable X with
probability density function f(x) = 0.5e
-|x|
, 1 < x < 10 and 0 otherwise. Further use the

results to find Mean and Variance.
(kth moment = E(Xk

), Mean = first moment and Variance = second moment – Mean2


Ans # Define the probability density function
f <- function(x) 0.5 * exp(-abs(x))

# Calculate the first moment (mean)
mean <- integrate(function(x) x * f(x), lower = 1, upper = 10)$value

# Print the mean
print(mean)

# Calculate the second moment
second_moment <- integrate(function(x) x^2 * f(x), lower = 1, upper = 10)$value

# Print the second moment
print(second_moment)

# Calculate the variance using the mean and second moment
variance <- second_moment - mean^2

# Print the variance
print(variance)

Q5 
# Define the PMF function for X
pmf_X <- function(x) {
  if (x >= 1) {
    return (3/4) * (1/4)^(x - 1)
  } else {
    return (0)
  }
}

# Function to calculate the PMF of Y = X^2
pmf_Y <- function(y) {
  if (y >= 1) {
    x_values <- sqrt(y)
    pmf_y <- sapply(x_values, function(x) pmf_X(round(x))^2)
    return (sum(pmf_y))
  } else {
    return (0)
  }
}

# Calculate the probability of Y for X = 3
y_probability_x3 <- pmf_Y(3)

# Print the probability of Y for X = 3
cat("Probability of Y for X = 3:", y_probability_x3, "\n")

# Calculate the expected value and variance of Y for X = 1, 2, 3, 4, 5
x_values <- 1:5
expected_values <- sapply(x_values, function(x) sum((x^2) * sapply(1:x, pmf_X)))
variances <- sapply(x_values, function(x) sum((x^4) * sapply(1:x, pmf_X)) - (sum((x^2) * sapply(1:x, pmf_X)))^2)

# Print the results
results <- data.frame(X = x_values, Expected_Value = expected_values, Variance = variances)
print(results)



